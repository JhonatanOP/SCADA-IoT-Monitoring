{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": false,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 1,
  "id": null,
  "uid": "scada-iot-overview",
  "iteration": 172,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "type": "timeseries",
      "title": "Temperature (Â°C)",
      "id": 1,
      "gridPos": { "h": 8, "w": 12, "x": 0, "y": 0 },
      "datasource": { "type": "influxdb", "uid": "${DS_INFLUX}" },
      "fieldConfig": {
        "defaults": {
          "unit": "celsius",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              { "color": "green", "value": null },
              { "color": "yellow", "value": 26 },
              { "color": "red", "value": 28 }
            ]
          }
        },
        "overrides": []
      },
      "targets": [
        {
          "query": "from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"environment\" and r.sensor == \"temperature\" and r._field == \"value\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
          "refId": "A",
          "queryType": "flux"
        }
      ],
      "options": {
        "legend": { "showLegend": true, "displayMode": "list" },
        "tooltip": { "mode": "multi" }
      }
    },
    {
      "type": "timeseries",
      "title": "Humidity (%)",
      "id": 2,
      "gridPos": { "h": 8, "w": 12, "x": 12, "y": 0 },
      "datasource": { "type": "influxdb", "uid": "${DS_INFLUX}" },
      "fieldConfig": {
        "defaults": {
          "unit": "percent",
          "min": 0,
          "max": 100,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              { "color": "red", "value": null },
              { "color": "green", "value": 30 },
              { "color": "yellow", "value": 60 },
              { "color": "red", "value": 75 }
            ]
          }
        },
        "overrides": []
      },
      "targets": [
        {
          "query": "from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"environment\" and r.sensor == \"humidity\" and r._field == \"value\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
          "refId": "A",
          "queryType": "flux"
        }
      ],
      "options": {
        "legend": { "showLegend": true, "displayMode": "list" },
        "tooltip": { "mode": "multi" }
      }
    },
    {
      "type": "timeseries",
      "title": "Vibration (g)",
      "id": 3,
      "gridPos": { "h": 8, "w": 12, "x": 0, "y": 8 },
      "datasource": { "type": "influxdb", "uid": "${DS_INFLUX}" },
      "fieldConfig": {
        "defaults": {
          "unit": "none",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              { "color": "green", "value": null },
              { "color": "yellow", "value": 0.18 },
              { "color": "red", "value": 0.22 }
            ]
          }
        },
        "overrides": []
      },
      "targets": [
        {
          "query": "from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"machine\" and r.sensor == \"vibration\" and r._field == \"value\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
          "refId": "A",
          "queryType": "flux"
        }
      ],
      "options": {
        "legend": { "showLegend": true, "displayMode": "list" },
        "tooltip": { "mode": "multi" }
      }
    },
    {
      "type": "stat",
      "title": "Current Readings",
      "id": 4,
      "gridPos": { "h": 8, "w": 12, "x": 12, "y": 8 },
      "datasource": { "type": "influxdb", "uid": "${DS_INFLUX}" },
      "fieldConfig": {
        "defaults": { "mappings": [], "thresholds": { "mode": "absolute", "steps": [{ "color": "green", "value": null }] } },
        "overrides": []
      },
      "options": {
        "reduceOptions": { "calcs": ["lastNotNull"], "fields": "", "values": false },
        "orientation": "horizontal",
        "textMode": "auto",
        "colorMode": "value",
        "graphMode": "area"
      },
      "targets": [
        {
          "refId": "A",
          "queryType": "flux",
          "query": "import \"influxdata/influxdb/schema\"\nunion(tables: [\n  from(bucket: v.bucket)\n    |> range(start: -15m)\n    |> filter(fn: (r) => r._measurement == \"environment\" and r.sensor == \"temperature\" and r._field == \"value\")\n    |> last(),\n  from(bucket: v.bucket)\n    |> range(start: -15m)\n    |> filter(fn: (r) => r._measurement == \"environment\" and r.sensor == \"humidity\" and r._field == \"value\")\n    |> last(),\n  from(bucket: v.bucket)\n    |> range(start: -15m)\n    |> filter(fn: (r) => r._measurement == \"machine\" and r.sensor == \"vibration\" and r._field == \"value\")\n    |> last()\n])"
        }
      ]
    }
  ],
  "refresh": "10s",
  "schemaVersion": 38,
  "style": "dark",
  "tags": ["scada", "iot", "node-red", "influxdb", "grafana"],
  "templating": {
    "list": [
      {
        "name": "DS_INFLUX",
        "type": "datasource",
        "query": "influxdb",
        "current": { "text": "InfluxDB", "value": "InfluxDB" },
        "label": "Data source"
      },
      {
        "name": "bucket",
        "type": "constant",
        "label": "Bucket",
        "query": "scada_iot",
        "current": { "text": "scada_iot", "value": "scada_iot" }
      }
    ]
  },
  "time": { "from": "now-6h", "to": "now" },
  "timepicker": {
    "refresh_intervals": ["5s","10s","30s","1m","5m","15m","1h"]
  },
  "title": "SCADA / IoT Overview",
  "version": 1,
  "weekStart": ""
}